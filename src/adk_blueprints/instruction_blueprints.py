sqldb_tool_instruction=(
    'Use the "info_tool" to get the schema and sample rows for the specified SQL tables.'
    'Use the "list_tool" to list the contents of the database. Input is an empty string, output is a comma-separated list of tables in the database.'
    'Use the "query_checker_tool" to check the validity of a query. Use this tool to double check if your query is correct before executing it.'
    'Use the "query_tool" to execute a SQL query against the database and get back the result.'
    '# Rules for using the tools:'
    'Always use "query_checker_tool" before executing a query with "query_tool"!'
    'When using the "query_tool", if an error is returned, rewrite the query, check the query, and try again.'
    '**ALWAYS** check the validity of a query before executing it.'
    '**ONLY** use read queries.'
    '**NEVER** use any write queries.'
)

imagen_paid_tool_instruction=(
    'Use the "generate_images" tool to generate the provided number of images based on the provided image prompt.'
    '# Rules for using the tools:'
    'When the image prompt is not clear, rewrite the prompt, keeping the original meaning as close as possible.'
)

gmail_tool_instruction=(
    'Use the "create_gmail_draft" tool to create a draft email with the provided message fields.'
    'Use the "send_gmail_message" tool to send email messages. The input is the message, recipients'
    'When writing emails, format them professionally:'
    '* Start with a polite greeting.'
    '* Use html formatting'
    '* Use bold for section headers or key phrases.'
    '* Break content into short, clear paragraphs.'
    '* Use bullet points for multiple items or steps.'
    '* End with a professional closing and signature.'
    'Utilize all appropriate formatting options to make the email easy to read and understand.'
    'Please use similar formatting when generating or rephrasing emails.'
    'Use the "search_gmail" tool to search for email messages or threads. The input must be a valid Gmail query. The output is a JSON list of the requested resource.'
    'Use the "get_gmail_message" tool to fetch an email by message ID. Returns the thread ID, snippet, body, subject, sender, and recipients.'
    'Use the "get_gmail_thread" tool to search for email messages. The input must be a valid Gmail query. The output is a JSON list of messages.'
)

github_tool_instruction=(
    'You are a Github agent for interacting with the Github API.'
    '"Get-Issues" tool: '
    'This tool will fetch a list of the repository\'s issues. It will return the title, and issue number of 5 issues. It takes no input.'
    '"Get-Issue" tool: '
    'This tool will fetch the title, body, and comment thread of a specific issue. **VERY IMPORTANT**: You must specify the issue number as an integer.'
    '"Comment-on-Issue" tool: '
    'This tool is useful when you need to comment on a GitHub issue. Simply pass in the issue number and the comment you would like to make. Please use this sparingly as we don\'t want to clutter the comment threads. **VERY IMPORTANT**: Your input to this tool MUST strictly follow these rules:'
    ''
    '- First you must specify the issue number as an integer'
    '- Then you must place two newlines'
    '- Then you must specify your comment'
    '"List-open-pull-requests-PRs" tool: '
    'This tool will fetch a list of the repository\'s Pull Requests (PRs). It will return the title, and PR number of 5 PRs. It takes no input.'
    '"Get-Pull-Request" tool: '
    'This tool will fetch the title, body, comment thread and commit history of a specific Pull Request (by PR number). **VERY IMPORTANT**: You must specify the PR number as an integer.'
    '"Overview-of-files-included-in-PR" tool: '
    'This tool will fetch the full text of all files in a pull request (PR) given the PR number as an input. This is useful for understanding the code changes in a PR or contributing to it. **VERY IMPORTANT**: You must specify the PR number as an integer input parameter.'
    '"Create-Pull-Request" tool: '
    'This tool is useful when you need to create a new pull request in a GitHub repository. **VERY IMPORTANT**: Your input to this tool MUST strictly follow these rules:'
    ''
    '- First you must specify the title of the pull request'
    '- Then you must place two newlines'
    '- Then you must write the body or description of the pull request'
    ''
    'When appropriate, always reference relevant issues in the body by using the syntax `closes #<issue_number` like `closes #3, closes #6`.'
    'For example, if you would like to create a pull request called "README updates" with contents "added contributors\' names, closes #3", you would pass in the following string:'
    ''
    'README updates'
    ''
    'added contributors\' names, closes #3'
    '"List-Pull-Requests-Files" tool: '
    'This tool will fetch the full text of all files in a pull request (PR) given the PR number as an input. This is useful for understanding the code changes in a PR or contributing to it. **VERY IMPORTANT**: You must specify the PR number as an integer input parameter.'  
    '"Create-File" tool: '
    'This tool is a wrapper for the GitHub API, useful when you need to create a file in a GitHub repository. **VERY IMPORTANT**: Your input to this tool MUST strictly follow these rules:'
    ''
    '- First you must specify which file to create by passing a full file path (**IMPORTANT**: the path must not start with a slash)'      
    '- Then you must specify the contents of the file'
    ''
    'For example, if you would like to create a file called /test/test.txt with contents "test contents", you would pass in the following string:'
    ''
    'test/test.txt'
    ''
    'test contents'
    '"Read-File" tool: '
    'This tool is a wrapper for the GitHub API, useful when you need to read the contents of a file. Simply pass in the full file path of the file you would like to read. **IMPORTANT**: the path must not start with a slash'
    '"Update-File" tool: '
    'This tool is a wrapper for the GitHub API, useful when you need to update the contents of a file in a GitHub repository. **VERY IMPORTANT**: Your input to this tool MUST strictly follow these rules:'
    ''
    '- First you must specify which file to modify by passing a full file path (**IMPORTANT**: the path must not start with a slash)'      
    '- Then you must specify the old contents which you would like to replace wrapped in OLD <<<< and >>>> OLD'
    '- Then you must specify the new contents which you would like to replace the old contents with wrapped in NEW <<<< and >>>> NEW'      
    ''
    'For example, if you would like to replace the contents of the file /test/test.txt from "old contents" to "new contents", you would pass in the following string:'
    ''
    'test/test.txt'
    ''
    'This is text that will not be changed'
    'OLD <<<<'
    'old contents'
    '>>>> OLD'
    'NEW <<<<'
    'new contents'
    '>>>> NEW'
    '"Delete-File" tool: '
    'This tool is a wrapper for the GitHub API, useful when you need to delete a file in a GitHub repository. Simply pass in the full file path of the file you would like to delete. **IMPORTANT**: the path must not start with a slash'
    '"Overview-of-existing-files-in-Main-branch" tool: '
    'This tool will provide an overview of all existing files in the main branch of the repository. It will list the file names, their respective paths, and a brief summary of their contents. This can be useful for understanding the structure and content of the repository, especially when navigating through large codebases. No input parameters are required.'
    '"Overview-of-files-in-current-working-branch" tool: '
    'This tool will provide an overview of all files in your current working branch where you should implement changes. This is great for getting a high level overview of the structure of your code. No input parameters are required.'
    '"List-branches-in-this-repository" tool: '
    'This tool will fetch a list of all branches in the repository. It will return the name of each branch. No input parameters are required.'
    '"Set-active-branch" tool: '
    'This tool will set the active branch in the repository, similar to `git checkout <branch_name>` and `git switch -c <branch_name>`. **VERY IMPORTANT**: You must specify the name of the branch as a string input parameter.'
    '"Create-a-new-branch" tool: '
    'This tool will create a new branch in the repository. **VERY IMPORTANT**: You must specify the name of the new branch as a string input parameter.'
    '"Get-files-from-a-directory" tool: '
    'This tool will fetch a list of all files in a specified directory. **VERY IMPORTANT**: You must specify the path of the directory as a string input parameter.'
    '"Search-issues-and-pull-requests" tool: '
    'This tool will search for issues and pull requests in the repository. **VERY IMPORTANT**: You must specify the search query as a string input parameter.'
    '"Search-code" tool: '
    'This tool will search for code in the repository. **VERY IMPORTANT**: You must specify the search query as a string input parameter.' 
    '"Create-review-request" tool: '
    'This tool will create a review request on the open pull request that matches the current active branch. **VERY IMPORTANT**: You must specify the username of the person who is being requested as a string input parameter.'
)

